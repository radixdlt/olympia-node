/*
 * (C) Copyright 2020 Radix DLT Ltd
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the “Software”),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

apply plugin: 'java'
apply plugin: 'org.sonarqube'
apply plugin: 'project-report'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'application'

mainClassName = 'com.radixdlt.cli.RadixCLI'

compileTestJava {
    options.compilerArgs += ["-Aproject=${project.group}/${project.name}"]
}

dependencies {
    implementation project(':radixdlt-java-common')

    implementation 'com.google.code.gson:gson'
    implementation 'commons-cli:commons-cli'
    implementation 'info.picocli:picocli'

    annotationProcessor 'info.picocli:picocli-codegen'

    testImplementation 'junit:junit'
    testImplementation 'org.mockito:mockito-core'
    testImplementation 'org.assertj:assertj-core'
}

shadowJar {
    manifest {
        attributes 'Main-Class': 'com.radixdlt.cli.RadixCLI'
    }
    archiveFileName = "radixdlt-cli-${archiveClassifier}.${archiveExtension}"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled true
        csv.enabled false
    }
}

def networkName = properties.get('networkName', 'testnet')
def enableAWSSecret = properties.get('enableAWSSecret', false)
def recreateAWSSecret = properties.get('recreateAWSSecret', false)
def nodeNumber = properties.get('nodeNumber', 0)
def nodeNamePrefix = properties.get('nodeNamePrefix', "fullnode")
def secretPasswordKey = properties.get('secretPasswordKey', "")
def nodeNames = properties.get('nodeNames', "")

task generateNodeKey(type: Exec) {
    dependsOn compileJava
    dependsOn ':radixdlt-java-common:jar'

    group = "Execution"
    description = "Generate Node key"
    commandLine "java", "-classpath", sourceSets.main.runtimeClasspath.getAsPath(),
            "com.radixdlt.cloud.AWSSecrets",
            "--enable-aws-secrets=${enableAWSSecret}",
            "--recreate-aws-secrets=${recreateAWSSecret}",
            "--network-name=${networkName}",
            "--node-number=${nodeNumber}",
            "--node-name-prefix=${nodeNamePrefix}",
            "--node-names=${nodeNames}",
            "--secret-password-key=${secretPasswordKey}"
}
