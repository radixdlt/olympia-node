/*
 * (C) Copyright 2020 Radix DLT Ltd
 *
 * Radix DLT Ltd licenses this file to you under the Apache License,
 * Version 2.0 (the "License"); you may not use this file except in
 * compliance with the License.  You may obtain a copy of the
 * License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied.  See the License for the specific
 * language governing permissions and limitations under the License.
 */

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'distribution'
apply plugin: 'project-report'
apply plugin: 'nebula.ospackage'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'com.moowork.node'
apply plugin: 'me.champeau.gradle.jmh'
apply plugin: 'org.sonarqube'
apply plugin: 'net.nemerosa.versioning'
apply plugin: 'com.palantir.git-version'

node {
    download = true
}

// Example: ./gradlew run ... -P overrideMainClassName=org.radix.GenerateUniverses
mainClassName = properties.get('overrideMainClassName', 'org.radix.Radix')
def validators = properties.get('validators', '2')

startScripts {
    classpath = files('src/resources') + classpath
    // ^^ will prepend '$APP_HOME/lib/resources' to the classpath, which we'll use it as a pattern below
    doLast {
        def windowsScriptFile = file getWindowsScript()
        def unixScriptFile = file getUnixScript()
        windowsScriptFile.text = windowsScriptFile.text.replace('%APP_HOME%\\lib\\resources', '%RADIXDLT_HOME%')
        unixScriptFile.text = unixScriptFile.text.replace('$APP_HOME/lib/resources', '$RADIXDLT_HOME')
    }
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration/java')
        }
        resources.srcDir file('src/integration/resources')
    }
}


configurations {
    integrationTestImplementation.extendsFrom testImplementation
}

task integrationTest(type: Test) {
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    mustRunAfter(test)
}

versionFile {
    mustRunAfter(processResources)
    // Path to the file to be written
    file = new File("$buildDir/resources/main", 'version.properties')
}

classes {
    dependsOn(versionFile)
}

checkstyleIntegrationTest {
    configFile rootProject.file('config/checkstyle/checkstyle_test.xml')
}

checkstyleJmh {
    configFile rootProject.file('config/checkstyle/checkstyle_test.xml')
}

test {
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        outputs.upToDateWhen { false }
        showStandardStreams true
    }
    systemProperty "java.security.egd", "file:/dev/urandom"
}

integrationTest {
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        outputs.upToDateWhen { false }
        showStandardStreams true
    }
    systemProperty "java.security.egd", "file:/dev/urandom"
    jacoco {
        // It appears that Jacoco can introduce thread and/or JVM pauses, which
        // in turn can cause timeouts that interfere with integration tests.
        enabled false
    }
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled true
        csv.enabled false
    }
}

dependencies {
    // If dependencies on other projects appear, do not forget to update
    // generateDevUniverse task to depend on those projects
    implementation project(':radixdlt-engine')
    implementation project(':radixdlt-java-common')

    implementation 'io.reactivex.rxjava3:rxjava'
    implementation 'com.sleepycat:je'

    implementation 'com.lmax:disruptor'

    implementation 'commons-cli:commons-cli'
    implementation 'org.xerial.snappy:snappy-java'
    implementation 'io.netty:netty-all'
    implementation 'com.google.inject:guice'
    implementation 'com.google.inject.extensions:guice-grapher'

    implementation 'io.undertow:undertow-core'
    implementation 'io.undertow:undertow-servlet'
    implementation 'com.stijndewitt.undertow.cors:undertow-cors-filter'

    testImplementation 'org.awaitility:awaitility'
    testImplementation 'org.objenesis:objenesis'
    testImplementation 'org.javassist:javassist'
    testImplementation 'org.mockito:mockito-core'
    testImplementation 'net.bytebuddy:byte-buddy'
    testImplementation 'net.bytebuddy:byte-buddy-agent'
    testImplementation 'org.powermock:powermock-module-junit4'
    testImplementation 'org.powermock:powermock-api-mockito2'
    testImplementation 'nl.jqno.equalsverifier:equalsverifier'
    testImplementation 'org.assertj:assertj-core'
    testImplementation 'com.flipkart.zjsonpatch:zjsonpatch'
    testImplementation 'org.reflections:reflections'

    testImplementation 'org.openjdk.jmh:jmh-core'
    testImplementation 'org.openjdk.jmh:jmh-generator-annprocess'
}

jmh {
    duplicateClassesStrategy = 'include'
    fork = 2
    iterations = 3
    warmupIterations = 1
}

// More memory
tasks.withType(JavaExec) {
    jvmArgs = ['-Xmx1024m']
}

tasks.withType(Test){
    minHeapSize = "128m"
    maxHeapSize = "512m"
}

// Compress distTar
tasks.withType(Tar) {
    compression = Compression.GZIP
}

task generateDevUniverse(type: Exec) {
    dependsOn compileJava

    //Alternative solution (slower, but does not require manual maintenance):
    //dependsOn tasks.withType(Jar)
    dependsOn ':radixdlt-java-common:jar'
    dependsOn ':radixdlt-engine:jar'

    group = "Execution"
    description = "Generate development universe"
    commandLine "java", "-classpath", sourceSets.main.runtimeClasspath.getAsPath(),
        "org.radix.GenerateUniverses",
        "--universe-type=development",
        "--validator-count=${validators}",
        "--include-private-keys",
        "--no-json-output",
        "--issue-default-tokens"
}

task createGenerateUniversesScripts(type: CreateStartScripts) {
  mainClassName = 'org.radix.GenerateUniverses'
  applicationName = 'generate_universes'
}

tasks.getByName("createGenerateUniversesScripts").outputDir = tasks.getByName("startScripts").outputDir
tasks.getByName("createGenerateUniversesScripts").classpath = tasks.getByName("startScripts").classpath
tasks.getByName("createGenerateUniversesScripts").optsEnvironmentVar = tasks.getByName("startScripts").optsEnvironmentVar
tasks.getByName("createGenerateUniversesScripts") {
    // Make sure all scripts have consistent classpath
    doLast {
        def windowsScriptFile = file getWindowsScript()
        def unixScriptFile = file getUnixScript()
        windowsScriptFile.text = windowsScriptFile.text.replace('%APP_HOME%\\lib\\resources', '%RADIXDLT_HOME%')
        unixScriptFile.text = unixScriptFile.text.replace('$APP_HOME/lib/resources', '$RADIXDLT_HOME')
    }
}
tasks.getByName("startScripts").dependsOn createGenerateUniversesScripts

task createGenerateNodeKeyScripts(type: CreateStartScripts) {
  mainClassName = 'org.radix.GenerateNodeKey'
  applicationName = 'generate_node_key'
}

tasks.getByName("createGenerateNodeKeyScripts").outputDir = tasks.getByName("startScripts").outputDir
tasks.getByName("createGenerateNodeKeyScripts").classpath = tasks.getByName("startScripts").classpath
tasks.getByName("createGenerateNodeKeyScripts").optsEnvironmentVar = tasks.getByName("startScripts").optsEnvironmentVar
tasks.getByName("createGenerateNodeKeyScripts") {
    // Make sure all scripts have consistent classpath
    doLast {
        def windowsScriptFile = file getWindowsScript()
        def unixScriptFile = file getUnixScript()
        windowsScriptFile.text = windowsScriptFile.text.replace('%APP_HOME%\\lib\\resources', '%RADIXDLT_HOME%')
        unixScriptFile.text = unixScriptFile.text.replace('$APP_HOME/lib/resources', '$RADIXDLT_HOME')
    }
}
tasks.getByName("startScripts").dependsOn createGenerateNodeKeyScripts

ospackage {
    os = LINUX

    postInstall file('ospackage/postinst.sh')
    preUninstall file('ospackage/prerm.sh')
    postUninstall file('ospackage/postrm.sh')

    from("$buildDir/install/$name") {
        into "/opt/$name"
    }
    from("ospackage/${name}.service") {
        into "/etc/systemd/system"
    }

    buildDeb {
        dependsOn += [installDist]
    }
    buildRpm {
        dependsOn += [installDist]
    }
}

/**
 * Display size of each dependency
 */
task depsize {
    doLast {
        final formatStr = "%,10.2f"
        final conf = configurations.default
        final size = conf.collect { it.length() / (1024 * 1024) }.sum()
        final out = new StringBuffer()
        out << 'Total dependencies size:'.padRight(45)
        out << "${String.format(formatStr, size)} Mb\n\n"
        conf.sort { -it.length() }
                .each {
            out << "${it.name}".padRight(45)
            out << "${String.format(formatStr, (it.length() / 1024))} kb\n"
        }
        println(out)
    }
}

/**
 * Manages the *.deb file in the docker directory
 */
task deb4docker(type: Copy, dependsOn: buildDeb) {
    def ospackageVersion = version.replaceAll('-', '~')

    from("$buildDir/distributions") {
        include "radixdlt_${ospackageVersion}_all.deb"
    }
    into project.file('../docker')
    doFirst {
        def names = [] as Set
        destinationDir.eachFileMatch(groovy.io.FileType.FILES, ~/radixdlt_.+_all\.deb/) {
            names << it.name
        }
        names.toSorted().each {
            def rip = new File(destinationDir, it)
            rip.delete()
            println "Deleted conflicting deb package: ${rip.name} ..."
        }
    }
}

/**
 * Creates the JSON RPC documentation
 */
task updatejsonschema2md(type: Copy, dependsOn: npmInstall) {
    from 'header.ejs'
    into 'node_modules/@adobe/jsonschema2md/templates/md'
}

task genmarkdown(type: NodeTask, dependsOn: updatejsonschema2md) {
    script = file('node_modules/@adobe/jsonschema2md/cli.js')
    args = ["-d", "$projectDir/src/main/resources/schemas", "-o", "$projectDir/src/main/resources/markdown"]
}

task gendoc(type: NodeTask, dependsOn: genmarkdown) {
    script = file('create-html.js')
}

/**
 * Creates the JSON RPC documentation and manages the *.deb file in the docker directory
 */
task gendocanddeb4docker(dependsOn: [gendoc, deb4docker]) {
    deb4docker.mustRunAfter(gendoc);
}
